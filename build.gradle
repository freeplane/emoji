import java.util.concurrent.*
import java.util.zip.ZipFile

interface EmojiConstants {
	def emojiVersion = '12.1'
	def TWEMOJI_VERSION = '12.1.4'
	def twemojiBaseUrl = "https://twemoji.maxcdn.com/v/$TWEMOJI_VERSION/svg/"
	def emojiListUrl = "http://unicode.org/Public/emoji/$emojiVersion/emoji-test.txt"
	def HEX_CODEPOINT_END_POSITION = 43
	def STATUS_END_POSITION = 65
	def EMOJI_POSITION = 67
}

class EmojiDownloader implements EmojiConstants{

	File emojiListFile
	File emojiDir
	
	EmojiDownloader(File emojiRootDir) {
		this.emojiDir = new File(emojiRootDir, 'resources/images/emoji')
		this.emojiDir.mkdirs()
		this.emojiListFile = new File(emojiRootDir, 'resources/txt/emojilist.txt')
	}
	
	def downloadEmojiList(){
		if (!emojiListFile.exists()) {
			emojiListFile.parentFile.mkdirs()
    		new URL(emojiListUrl).withInputStream{ i -> emojiListFile.withOutputStream{ it << i }}
		}
		return this
	}
	
	def downloadEmojiFiles(){
		ExecutorService exec = Executors.newFixedThreadPool(40)
		emojiListFile.eachLine('UTF-8') { String line ->
			if(line.length() > EMOJI_POSITION  && line.charAt(HEX_CODEPOINT_END_POSITION) == ';' && line.charAt(STATUS_END_POSITION) == '#') {
 				String emojiStatus = line.substring(HEX_CODEPOINT_END_POSITION + 1, STATUS_END_POSITION).trim()
 				if(emojiStatus != 'component') {
	 				String hexCodes = line.substring(0, HEX_CODEPOINT_END_POSITION).trim()
	 				String twemojiFileName = hexCodes.toLowerCase().replace(' ', '-').replaceFirst("^00", "") + '.svg';
	 				String emojiUrl = "$twemojiBaseUrl$twemojiFileName"
	 				def emojiFile = new File(emojiDir, twemojiFileName)
			 		if (!emojiFile.exists()) {
						exec.submit({
							def get = new URL(emojiUrl).openConnection();
							def getRC = get.getResponseCode();
							if(getRC.equals(200)) {
								emojiFile.withOutputStream{
									try {
										new BufferedOutputStream(it) << new BufferedInputStream(get.getInputStream())
									}
									catch(Exception e){
										new BufferedOutputStream(it) << new BufferedInputStream(new URL(emojiUrl).openConnection().getInputStream())
									}
								}
							}
						} as Runnable)
					}
				}
			}
		}
		exec.shutdown()
		if(! exec.isTerminated()) {	
			println('Wait for downloads')
			exec.awaitTermination(3600, TimeUnit.SECONDS);
		}
		println('Downloads completed')
		return this	
	}
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group 'org.freeplane.emoji'
version = EmojiConstants.TWEMOJI_VERSION

task downloadEmoji {
	outputs.dir("${project.buildDir}/emoji/resources")

	doLast {
		def downloader = new EmojiDownloader(file("$buildDir/emoji"))
		downloader.downloadEmojiList()
		if (! downloader.emojiDir.isDirectory() || downloader.emojiDir.list().length == 0) {
			downloader.downloadEmojiFiles()
		}
	}
}

jar {
	dependsOn downloadEmoji
	
	manifest = project.manifest {
		attributes("Manifest-Version": "1.0")
	}
	archiveBaseName = 'twemoji'
	archiveVersion = EmojiDownloader.TWEMOJI_VERSION
    from (files("${project.buildDir}/emoji/resources"))
    from (files("src/resources"))
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId 'twemoji'
			groupId = project.group
			version = project.version
			artifact jar
            pom {
                name = project.name
                description = 'Emoji package'
                url = 'https://github.com/freeplane/emoji'

                scm {
                    url = 'https://github.com/freeplane/emoji'
                    connection = 'scm:git:https://github.com/freeplane/emoji.git'
                    developerConnection = 'scm:git:git@github.com:freeplane/emoji.git'
                }

                licenses {
                    license {
                        name = 'CC-BY 4.0'
                        url = 'https://creativecommons.org/licenses/by/4.0/'
                    }
                }

                developers {
                      developer {
                        id = 'twitter'
                        name = 'Twitter, Inc and other contributors'
                    }
                      developer {
                        id = 'dpolivaev'
                        name = 'Dimitry Polivaev'
                        email = 'dpolivaev@gmx.de'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
        maven { 
			 url  = "${project.gradle.gradleUserHomeDir}/local-artifacts"
		}
    }
}

signing {
    sign publishing.publications.maven
}

javadoc {
    enabled = true
    options.encoding = "UTF-8"
    failOnError = false
}
